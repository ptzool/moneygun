<%= form_with(model: [ @organization, @task, @task_timetracking ], class: "contents space-y-4", data: { controller: "time-entry-form", turbo: false }) do |form| %>
  <%= render "shared/errors", object: form.object %>
  
  <div class="card shadow mb-4">
    <div class="card-body">
      <h3 class="text-lg font-medium mb-4">Time Entry Details</h3>
      
      <%= form.hidden_field :task_id, value: @task.id %>
      
      <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
        <div>
          <%= form.label :date, class: "block text-sm font-medium text-gray-700 mb-1" %>
          <%= form.date_field :date, class: "form-input w-full", value: form.object.date || Date.today %>
        </div>
        
        <div class="md:col-span-2 border-t border-gray-200 pt-4 mt-2"></div>
        
        <div>
          <%= form.label :start, "Start Time", class: "block text-sm font-medium text-gray-700 mb-1" %>
          <%= form.time_field :start, class: "form-input w-full", data: { action: "change->time-entry-form#updateDuration" } %>
        </div>
        
        <div>
          <%= form.label :end, "End Time", class: "block text-sm font-medium text-gray-700 mb-1" %>
          <%= form.time_field :end, class: "form-input w-full", data: { action: "change->time-entry-form#updateDuration" } %>
        </div>
        
        <div>
          <%= form.label :duration_in_hours, "Duration (hours)", class: "block text-sm font-medium text-gray-700 mb-1" %>
          <div class="flex items-center">
            <%= form.number_field :duration_in_hours, class: "form-input w-full", step: 0.25, min: 0.25, value: form.object.duration ? (form.object.duration / 60.0).round(2) : 1.0 %>
            <span class="ml-2 text-sm text-gray-600">hours</span>
          </div>
          <p class="text-sm text-gray-500 mt-1">Enter time directly or use start/end times</p>
        </div>
      </div>
    </div>
  </div>
  
  <div id="form-errors" class="text-red-500 bg-red-100 p-3 rounded hidden mb-4"></div>

  <div class="flex justify-between items-center">
    <% if form.object.persisted? %>
      <%= link_to "Cancel", organization_task_task_timetracking_path(@organization, @task, @task_timetracking), class: "btn btn-secondary" %>
    <% else %>
      <%= link_to "Cancel", organization_task_task_timetrackings_path(@organization, @task), class: "btn btn-secondary" %>
    <% end %>
    <%= form.submit form.object.new_record? ? "Add Time Entry" : "Update Time Entry", class: "btn btn-primary", data: { disable_with: "Saving..." } %>
  </div>
  
  <script>
    document.addEventListener('DOMContentLoaded', function() {
      const form = document.querySelector('form[data-controller="time-entry-form"]');
      const errorDiv = document.getElementById('form-errors');
      
      if (form) {
        form.addEventListener('submit', function(event) {
          const startField = form.querySelector('input[name*="[start]"]');
          const endField = form.querySelector('input[name*="[end]"]');
          const durationField = form.querySelector('input[name*="[duration_in_hours]"]');
          
          // Validate that we have either a duration or start/end times
          if (durationField && !durationField.value && (!startField?.value || !endField?.value)) {
            event.preventDefault();
            errorDiv.textContent = "Please enter either a duration or both start and end times.";
            errorDiv.classList.remove('hidden');
            return false;
          }
          
          // Validate duration is positive
          if (durationField && parseFloat(durationField.value) <= 0) {
            event.preventDefault();
            errorDiv.textContent = "Duration must be greater than zero.";
            errorDiv.classList.remove('hidden');
            return false;
          }
          
          // Hide any previous errors
          errorDiv.classList.add('hidden');
        });
      }
    });
  </script>
<% end %>
