<% content_for :title, "Task Timetrackings Calendar" %>
<% content_for :head do %>
  <!-- Direct FullCalendar CDN links -->
  <link href="https://cdn.jsdelivr.net/npm/fullcalendar@5.10.0/main.min.css" rel="stylesheet" />
  <script src="https://cdn.jsdelivr.net/npm/fullcalendar@5.10.0/main.min.js"></script>
  
  <style>
    /* Calendar base styling */
    .fc-theme-standard td, .fc-theme-standard th {
      border: 1px solid #e2e8f0;
    }
    .fc .fc-daygrid-day-number {
      padding: 6px;
      font-weight: 500;
    }
    .fc .fc-col-header-cell-cushion {
      padding: 10px 6px;
      font-weight: 600;
      text-transform: uppercase;
      letter-spacing: 0.05em;
      font-size: 0.85rem;
    }
    .fc-day-today {
      background-color: rgba(56, 178, 172, 0.1) !important;
    }
    .fc-event {
      border-radius: 4px !important;
      border: none !important;
      box-shadow: 0 1px 3px rgba(0,0,0,0.1);
      transition: transform 0.15s ease;
    }
    .fc-event:hover {
      transform: translateY(-1px);
      box-shadow: 0 4px 6px rgba(0,0,0,0.1);
      z-index: 5;
    }
    
    /* Selected day styling */
    .selected-date {
      background-color: rgba(79, 209, 197, 0.2) !important;
      border: 2px solid #4fd1c5 !important;
    }
    
    .work-day {
      background-color: rgba(72, 187, 120, 0.2) !important;
      position: relative;
    }
    .work-day::after {
      content: "‚úì";
      position: absolute;
      top: 2px;
      right: 2px;
      color: #48bb78;
      font-size: 10px;
    }
    
    .vacation-day {
      background-color: rgba(66, 153, 225, 0.2) !important;
      position: relative;
    }
    .vacation-day::after {
      content: "‚úà";
      position: absolute;
      top: 2px;
      right: 2px;
      color: #4299e1;
      font-size: 10px;
    }
    
    .sick-day {
      background-color: rgba(237, 100, 100, 0.2) !important;
      position: relative;
    }
    .sick-day::after {
      content: "üè•";
      position: absolute;
      top: 2px;
      right: 2px;
      font-size: 10px;
    }
    
    /* Calendar hover effects */
    .fc-day:hover {
      background-color: rgba(200, 200, 200, 0.2);
      cursor: pointer;
    }
    .fc-daygrid-day:hover {
      background-color: rgba(226, 232, 240, 0.5);
      cursor: pointer;
    }
    
    /* Badge styling */
    .badge {
      padding: 4px 8px;
      border-radius: 9999px;
      font-size: 0.75rem;
      font-weight: 600;
      box-shadow: 0 1px 2px rgba(0,0,0,0.1);
      display: inline-flex;
      align-items: center;
      line-height: 1;
    }
    
    .bg-success {
      background-color: #48bb78;
    }
    
    .bg-primary {
      background-color: #4299e1;
    }
    
    .bg-danger {
      background-color: #ed6464;
    }
    
    .bg-secondary {
      background-color: #718096;
    }
    
    .text-white {
      color: white;
    }
    
    /* Modal styling */
    .modal {
      position: fixed;
      top: 0;
      left: 0;
      z-index: 1050;
      width: 100%;
      height: 100%;
      overflow: auto;
      outline: 0;
      background-color: rgba(0, 0, 0, 0.5);
      display: none;
      backdrop-filter: blur(2px);
      transition: opacity 0.15s ease;
    }
    
    .modal.show {
      display: block;
      animation: fadeIn 0.2s ease;
    }
    
    @keyframes fadeIn {
      from { opacity: 0; }
      to { opacity: 1; }
    }
    
    .modal-dialog {
      position: relative;
      width: auto;
      margin: 1.75rem auto;
      max-width: 540px;
      pointer-events: none;
      transition: transform 0.3s ease;
      transform: translate(0, 0);
    }
    
    .modal-content {
      position: relative;
      display: flex;
      flex-direction: column;
      width: 100%;
      pointer-events: auto;
      background-color: #fff;
      background-clip: padding-box;
      border: none;
      border-radius: 0.5rem;
      outline: 0;
      box-shadow: 0 10px 25px -5px rgba(0,0,0,0.1), 0 10px 10px -5px rgba(0,0,0,0.04);
    }
    
    .modal-header {
      display: flex;
      flex-shrink: 0;
      align-items: center;
      justify-content: space-between;
      padding: 1.25rem 1.5rem;
      border-bottom: 1px solid #e2e8f0;
      border-top-left-radius: calc(0.5rem - 1px);
      border-top-right-radius: calc(0.5rem - 1px);
      background-color: #f9fafb;
    }
    
    .modal-body {
      position: relative;
      flex: 1 1 auto;
      padding: 1.5rem;
    }
    
    .modal-footer {
      display: flex;
      flex-wrap: wrap;
      flex-shrink: 0;
      align-items: center;
      justify-content: flex-end;
      padding: 1.25rem 1.5rem;
      border-top: 1px solid #e2e8f0;
      background-color: #f9fafb;
      border-bottom-right-radius: calc(0.5rem - 1px);
      border-bottom-left-radius: calc(0.5rem - 1px);
    }
    
    /* Alert styling */
    .alert {
      padding: 1rem 1.25rem;
      margin-bottom: 1rem;
      border: 1px solid transparent;
      border-radius: 0.5rem;
      display: flex;
      align-items: center;
      box-shadow: 0 1px 3px rgba(0,0,0,0.1);
    }
    
    .alert-success {
      color: #155724;
      background-color: #d4edda;
      border-color: #c3e6cb;
    }
    
    /* Button styling improvements */
    .btn {
      transition: all 0.2s ease;
      font-weight: 500;
      letter-spacing: 0.01em;
    }
    .btn:hover {
      transform: translateY(-1px);
      box-shadow: 0 2px 4px rgba(0,0,0,0.1);
    }
    .btn:active {
      transform: translateY(0);
    }
  </style>
<% end %>

<%= render "shared/confirmation_modal" %>

<%= render PageComponent.new(title: "Time Tracking Calendar for #{@task.name}") do |component| %>
  <% component.with_action_list do %>
    <%= link_to new_organization_task_task_timetracking_path(@organization, @task), class: "btn btn-primary flex items-center" do %>
      <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-1.5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6" />
      </svg>
      New Time Entry
    <% end %>
    <%= link_to organization_task_task_timetrackings_path(@organization, @task), class: "btn btn-secondary flex items-center" do %>
      <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-1.5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 10h16M4 14h16M4 18h16" />
      </svg>
      List View
    <% end %>
    <%= link_to organization_task_path(@organization, @task), class: "btn btn-secondary flex items-center" do %>
      <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-1.5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 19l-7-7m0 0l7-7m-7 7h18" />
      </svg>
      Back to Task
    <% end %>
    <%= button_tag type: "button", class: "btn btn-primary flex items-center", data: { action: "click->calendar-timetracking#showBulkEditModal" } do %>
      <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-1.5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 11H5m14 0a2 2 0 012 2v6a2 2 0 01-2 2H5a2 2 0 01-2-2v-6a2 2 0 012-2m14 0V9a2 2 0 00-2-2M5 11V9a2 2 0 012-2m0 0V5a2 2 0 012-2h6a2 2 0 012 2v2M7 7h10" />
      </svg>
      Bulk Edit
    <% end %>
  <% end %>

  <div class="card shadow-sm mt-4 mb-5 border border-gray-200 rounded-lg overflow-hidden">
    <div class="card-body bg-gradient-to-r from-blue-50 to-indigo-50 p-4">
      <div class="flex items-start">
        <div class="flex-shrink-0 bg-blue-100 rounded-full p-2 mt-1">
          <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 text-blue-600" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
          </svg>
        </div>
        <div class="ml-3">
          <h4 class="font-semibold text-blue-800 text-lg mb-2">Calendar Usage Guide</h4>
          <ul class="list-disc pl-5 space-y-2 text-sm text-blue-900">
            <li><strong>Single click</strong> on a day to add a new time entry</li>
            <li><strong>Shift+click</strong> on days to select multiple days for bulk editing</li>
            <li>Use the <strong>Bulk Edit</strong> button to apply work/vacation/sick days to selected dates</li>
            <li>Click on an existing time entry to view or edit details</li>
          </ul>
          <div class="mt-3 p-2 bg-white rounded-md border border-blue-200 text-sm flex items-start">
            <span class="text-amber-500 mr-2">üí°</span>
            <p class="text-gray-700"><strong>Tip:</strong> If clicking on a day doesn't open the time entry form, you can always use the "New Time Entry" button and select the date manually.</p>
          </div>
        </div>
      </div>
    </div>
  </div>

  <div class="card shadow-lg rounded-lg border border-gray-200 overflow-hidden" data-controller="calendar-timetracking" data-calendar-timetracking-organization-id="<%= @organization.id %>" data-calendar-timetracking-task-id="<%= @task.id %>" id="calendar-container" data-turbo="false" onclick="console.log('Calendar container clicked');">
    <% if notice %>
      <div class="alert alert-success mx-4 mt-4" role="alert">
        <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 text-green-500 mr-2 flex-shrink-0" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z" />
        </svg>
        <%= notice %>
      </div>
    <% end %>
    <div class="card-body p-5">
      <div class="flex flex-col sm:flex-row justify-between items-start sm:items-center mb-5 pb-4 border-b border-gray-200">
              <div class="flex-1">
                <h3 class="text-xl font-bold text-gray-800" data-calendar-timetracking-target="calendarTitle">
                  <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 inline-block mr-2 text-blue-600" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z" />
                  </svg>
                  Time Entries Calendar for <%= @task.name %>
                </h3>
                <p class="text-sm text-gray-600 mt-1">Manage your time entries and track work hours</p>
              </div>
        <div class="flex space-x-2 mt-2 sm:mt-0">
          <button type="button" class="btn btn-sm btn-secondary flex items-center px-3" data-action="click->calendar-timetracking#previous">
            <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7" />
            </svg>
            Previous
          </button>
          <button type="button" class="btn btn-sm btn-secondary flex items-center px-3" data-action="click->calendar-timetracking#today">
            <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z" />
            </svg>
            Today
          </button>
          <button type="button" class="btn btn-sm btn-secondary flex items-center px-3" data-action="click->calendar-timetracking#next">
            <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7" />
            </svg>
            Next
          </button>
        </div>
      </div>
      
      <div id="calendar" data-calendar-timetracking-target="calendar" data-calendar-url="<%= calendar_organization_task_task_timetrackings_path(@organization, @task, format: :json) %>"></div>
    
      <!-- Debug Info (Hidden) -->
      <div id="debug-info" class="hidden mt-4 p-4 bg-gray-100 rounded text-xs font-mono">
        <div>Organization ID: <%= @organization.id %></div>
        <div>Task ID: <%= @task.id %></div>
        <div>Selected Dates: <span id="debug-selected-dates">None</span></div>
      </div>
      
      <script>
                  // Direct bulk edit handlers implementation
                  const bulkEditHandlers = {
                    selectedDates: new Set(),
                    dayClassMap: new Map(),
                    
                    updateSelectedDaysDisplay: function() {
                      const container = document.getElementById('selected-days-container');
                      if (!container) return;
                      
                      if (this.selectedDates.size === 0) {
                        container.innerHTML = '<p class="text-gray-500 text-sm italic">No days selected. Hold Shift key and click on calendar days to select them.</p>';
                        return;
                      }
                      
                      const dateList = Array.from(this.selectedDates).sort();
                      const html = dateList.map(date => {
                        const dayClass = this.dayClassMap.get(date) || '';
                        const labelClass = this.getDayLabelClass(dayClass);
                        
                        return `
                          <div class="flex justify-between items-center p-1 border-b">
                            <span>${date}</span>
                            <span class="badge ${labelClass}">${this.getDayTypeName(dayClass)}</span>
                          </div>
                        `;
                      }).join('');
                      
                      container.innerHTML = html;
                      document.getElementById('debug-selected-dates').textContent = dateList.join(', ');
                    },
                    
                    getDayTypeName: function(dayClass) {
                      switch(dayClass) {
                        case 'work-day': return 'Work';
                        case 'vacation-day': return 'Vacation';
                        case 'sick-day': return 'Sick';
                        default: return 'Unset';
                      }
                    },
                    
                    getDayLabelClass: function(dayClass) {
                      switch(dayClass) {
                        case 'work-day': return 'bg-success text-white';
                        case 'vacation-day': return 'bg-primary text-white';
                        case 'sick-day': return 'bg-danger text-white';
                        default: return 'bg-secondary text-white';
                      }
                    },
                    
                    applyWorkDay: function() {
                      console.log("applyWorkDay called");
                      if (this.selectedDates.size === 0) {
                        alert("Please select at least one day first");
                        return;
                      }
                      this.applyDayClass('work-day');
                    },
                    
                    applyVacationDay: function() {
                      console.log("applyVacationDay called");
                      if (this.selectedDates.size === 0) {
                        alert("Please select at least one day first");
                        return;
                      }
                      this.applyDayClass('vacation-day');
                    },
                    
                    applySickDay: function() {
                      console.log("applySickDay called");
                      if (this.selectedDates.size === 0) {
                        alert("Please select at least one day first");
                        return;
                      }
                      this.applyDayClass('sick-day');
                    },
                    
                    applyDayClass: function(className) {
                      console.log(`applyDayClass called with class: ${className}`);
                      
                      this.selectedDates.forEach(date => {
                        this.dayClassMap.set(date, className);
                        console.log(`Set ${className} for date: ${date}`);
                      });
                      
                      this.updateSelectedDaysDisplay();
                    },
                    
                    applyStandardHours: function(hours) {
                      console.log(`applyStandardHours called with hours: ${hours}`);
                      
                      if (this.selectedDates.size === 0) {
                        alert("Please select at least one day first");
                        return;
                      }
                      
                      window.showConfirmationModal(
                        `Are you sure you want to add ${hours} hours to ${this.selectedDates.size} selected day(s)?`,
                        () => this.processBulkUpdate('work', hours, <%= @organization.id %>, <%= @task.id %>)
                      );
                    },
                    
                    clearHours: function() {
                      console.log("clearHours called");
                      
                      if (this.selectedDates.size === 0) {
                        alert("Please select at least one day first");
                        return;
                      }
                      
                      window.showConfirmationModal(
                        `Are you sure you want to clear time entries for ${this.selectedDates.size} selected day(s)?`,
                        () => this.processBulkUpdate('delete', 0, <%= @organization.id %>, <%= @task.id %>)
                      );
                    },
                    
                    getSelectedDayType: function() {
                      // Get the most common day type from selected dates
                      const typeCounts = {};
                      
                      this.selectedDates.forEach(date => {
                        const type = this.dayClassMap.get(date) || 'unset';
                        typeCounts[type] = (typeCounts[type] || 0) + 1;
                      });
                      
                      let maxType = 'work-day';
                      let maxCount = 0;
                      
                      for (const [type, count] of Object.entries(typeCounts)) {
                        if (count > maxCount) {
                          maxCount = count;
                          maxType = type;
                        }
                      }
                      
                      return maxType;
                    },
                    
                    submitBulkEdit: function(orgId, taskId) {
                      console.log("submitBulkEdit called");
                      const dayType = this.getSelectedDayType();
                      console.log("Day type selected:", dayType);
                      
                      let hours = 8; // Default to 8 hours
                      
                      const type = dayType.replace('-day', '');
                      console.log(`Processing bulk update with type: ${type}, hours: ${hours}`);
                      
                      this.processBulkUpdate(type, hours, orgId, taskId);
                    },
                    
                    processBulkUpdate: function(type, hours, orgId, taskId) {
                      console.log("processBulkUpdate called with type:", type, "hours:", hours);
                      console.log(`Organization ID: ${orgId}, Task ID: ${taskId}`);
                      
                      if (!orgId || !taskId) {
                        console.error("Organization ID or Task ID is missing");
                        alert("Error: Could not determine organization or task. Please refresh the page and try again.");
                        return;
                      }
                      
                      const url = `/organizations/${orgId}/tasks/${taskId}/task_timetrackings/bulk_update`;
                      console.log("Bulk update URL:", url);
                      
                      const csrfToken = document.querySelector('meta[name="csrf-token"]')?.content;
                      
                      if (!csrfToken) {
                        console.error("CSRF token not found");
                        alert("Error: CSRF token not found. Please refresh the page and try again.");
                        return;
                      }
                      
                      // Convert selected dates to entries with type information
                      const entries = Array.from(this.selectedDates).map(date => ({
                        date: date,
                        type: type,
                        hours: hours,
                        delete: type === 'delete'
                      }));
                      
                      console.log("Prepared entries:", entries);
                      
                      if (entries.length === 0) {
                        alert("No dates selected. Please select at least one date.");
                        return;
                      }
                      
                      console.log(`Sending ${entries.length} entries to ${url}`);
                      
                      fetch(url, {
                        method: 'POST',
                        headers: {
                          'Content-Type': 'application/json',
                          'X-CSRF-Token': csrfToken
                        },
                        body: JSON.stringify({ entries: entries })
                      })
                      .then(response => {
                        console.log("Response status:", response.status);
                        if (!response.ok) {
                          console.error("Server returned error status:", response.status);
                        }
                        return response.json();
                      })
                      .then(data => {
                        console.log("Response data:", data);
                        
                        if (data.error) {
                          console.error("Error returned from server:", data.error);
                          alert(`Error: ${data.error}`);
                          return;
                        }
                        
                        const successCount = data.success?.length || 0;
                        const errorCount = data.error?.length || 0;
                        
                        console.log(`Success count: ${successCount}, Error count: ${errorCount}`);
                        
                        let message = `Successfully processed ${successCount} entries.`;
                        if (errorCount > 0) {
                          message += ` Failed to process ${errorCount} entries.`;
                        }
                        
                        alert(message);
                        
                        // Hide the modal
                        const modal = document.getElementById('bulkEditModal');
                        if (modal) {
                          modal.classList.remove('show');
                          modal.style.display = 'none';
                        }
                        
                        // Refresh the calendar
                        const calendar = document.querySelector('.fc');
                        if (calendar) {
                          location.reload(); // Simplest way to refresh everything
                        }
                        
                        // Clear selections
                        this.selectedDates.clear();
                        this.updateSelectedDaysDisplay();
                      })
                      .catch(error => {
                        console.error('Error processing bulk update:', error);
                        alert('An error occurred while processing your request. Please try again.');
                      });
                    }
                  };
                  document.addEventListener('DOMContentLoaded', function() {
                    console.log("DOM content loaded for calendar view");
                    // Initialize the form validation for the modal form
                    const modalForm = document.getElementById('time-entry-form');
                    const errorDiv = document.getElementById('form-errors');
                
                    if (modalForm) {
                      console.log("Modal form found, setting up validation");
                      modalForm.addEventListener('submit', function(event) {
                        const durationField = modalForm.querySelector('input[name*="[duration_in_hours]"]');
                    
                        if (durationField && parseFloat(durationField.value) <= 0) {
                          event.preventDefault();
                          errorDiv.textContent = "Duration must be greater than zero.";
                          errorDiv.classList.remove('hidden');
                          return false;
                        }
                    
                        errorDiv.classList.add('hidden');
                      });
                    } else {
                      console.warn("Modal form not found on initial load");
                    }
                
                    // Add direct click handler to all day cells
                    document.addEventListener('click', function(e) {
                      if (!e.target.closest('.fc-daygrid-day-frame')) return;
                  
                      // If shift key is pressed, handle multiple selection
                      if (e.shiftKey || e.ctrlKey || e.metaKey) {
                        const cell = e.target.closest('.fc-daygrid-day');
                        if (!cell) return;
                  
                        const dateStr = cell.getAttribute('data-date');
                        if (!dateStr) return;
                        
                        console.log("Shift+click on day:", dateStr);
                        
                        // Toggle selection
                        if (bulkEditHandlers.selectedDates.has(dateStr)) {
                          bulkEditHandlers.selectedDates.delete(dateStr);
                          cell.classList.remove('selected-date');
                        } else {
                          bulkEditHandlers.selectedDates.add(dateStr);
                          cell.classList.add('selected-date');
                        }
                        
                        bulkEditHandlers.updateSelectedDaysDisplay();
                        return;
                      }
                      
                      // Regular click (no shift key)
                      console.log("Day cell clicked directly");
                      const cell = e.target.closest('.fc-daygrid-day');
                      if (!cell) return;
                  
                      const dateStr = cell.getAttribute('data-date');
                      if (!dateStr) return;
                  
                      console.log("Opening form for date:", dateStr);
                  
                      // Find form and set date
                      const dateField = document.querySelector('input[name="task_timetracking[date]"]');
                      if (dateField) {
                        dateField.value = dateStr;
                        console.log("Date set to:", dateStr);
                      } else {
                        console.error("Could not find date field");
                      }
                  
                      // Open modal
                      const modal = document.getElementById('timeEntryModal');
                      if (modal) {
                        modal.classList.add('show');
                        modal.style.display = 'block';
                        console.log("Modal opened");
                      } else {
                        console.error("Modal not found");
                      }
                    });
                
                    // Add event handler for Bulk Edit button
                    document.addEventListener('DOMContentLoaded', function() {
                      document.querySelector('button[data-action="click->calendar-timetracking#showBulkEditModal"]').addEventListener('click', function() {
                        console.log("Bulk Edit button clicked");
                        const modal = document.getElementById('bulkEditModal');
                        
                        if (bulkEditHandlers.selectedDates.size === 0) {
                          alert("Please select at least one day first (use shift+click to select days)");
                          return;
                        }
                        
                        bulkEditHandlers.updateSelectedDaysDisplay();
                        
                        if (modal) {
                          modal.classList.add('show');
                          modal.style.display = 'block';
                          console.log("Bulk Edit modal displayed");
                        } else {
                          console.error("Bulk Edit modal not found");
                        }
                      });
                    });
                
                    // Fallback initialization in case the Stimulus controller fails
                    setTimeout(function() {
                      const calendarEl = document.getElementById('calendar');
                      if (calendarEl && !calendarEl.innerHTML && typeof FullCalendar !== 'undefined') {
                        console.log("Initializing fallback calendar");
                        const calendar = new FullCalendar.Calendar(calendarEl, {
                          initialView: 'dayGridMonth',
                          headerToolbar: {
                            left: 'prev,next today',
                            center: 'title',
                            right: 'dayGridMonth'
                          },
                          events: calendarEl.dataset.calendarUrl,
                          dateClick: function(info) {
                            console.log("FullCalendar dateClick:", info.dateStr);
                            
                            // Check if shift key is pressed
                            if (window.event && (window.event.shiftKey || window.event.ctrlKey || window.event.metaKey)) {
                              console.log("Shift key detected in calendar click");
                              
                              // Find the day element
                              const dayEl = document.querySelector(`.fc-daygrid-day[data-date="${info.dateStr}"]`);
                              
                              // Toggle selection
                              if (bulkEditHandlers.selectedDates.has(info.dateStr)) {
                                bulkEditHandlers.selectedDates.delete(info.dateStr);
                                if (dayEl) dayEl.classList.remove('selected-date');
                              } else {
                                bulkEditHandlers.selectedDates.add(info.dateStr);
                                if (dayEl) dayEl.classList.add('selected-date');
                              }
                              
                              bulkEditHandlers.updateSelectedDaysDisplay();
                              return;
                            }
                            
                            // Normal date click
                            const modal = document.getElementById('timeEntryModal');
                            const dateField = document.querySelector('input[name="task_timetracking[date]"]');
                            if (dateField) {
                              dateField.value = info.dateStr;
                              console.log("Date field set to:", info.dateStr);
                            } else {
                              console.error("Date field not found");
                            }
                            if (modal) {
                              modal.classList.add('show');
                              modal.style.display = 'block';
                              console.log("Modal displayed");
                            } else {
                              console.error("Modal not found");
                            }
                          },
                          selectable: true
                        });
                        calendar.render();
                      } else if (!calendarEl) {
                        console.error("Calendar element not found");
                      } else if (!FullCalendar) {
                        console.error("FullCalendar library not loaded");
                      } else {
                        console.log("Calendar rendering skipped - already initialized");
                      }
                    }, 1000);
                  });
                </script>
    </div>
  </div>

  <!-- Time Entry Modal -->
  <div class="modal" id="timeEntryModal" tabindex="-1" aria-labelledby="timeEntryModalLabel" aria-hidden="true" data-calendar-timetracking-target="modal" style="z-index: 1060;" data-turbo="false" onclick="event.stopPropagation();">
    <div class="modal-dialog">
      <div class="modal-content">
        <div class="modal-header bg-gradient-to-r from-blue-50 to-indigo-50">
              <h5 class="modal-title text-blue-800 font-bold flex items-center" id="timeEntryModalLabel">
                <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2 text-blue-600" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z" />
                </svg>
                Add Time Entry
              </h5>
              <button type="button" class="text-gray-400 hover:text-gray-600 transition-colors focus:outline-none" aria-label="Close" data-action="click->calendar-timetracking#hideModal" onclick="console.log('Close button clicked');">
                <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
                </svg>
              </button>
            </div>
        <div class="modal-body">
          <%= form_with(model: [ @organization, @task, @task_timetracking ], class: "contents space-y-5", data: { controller: "time-entry-form", action: "submit->calendar-timetracking#submitForm", turbo: false }, id: "time-entry-form") do |form| %>
            <%= render "shared/errors", object: form.object %>
    
            <%= form.hidden_field :task_id, value: @task.id %>
    
            <div class="grid grid-cols-1 gap-4">
              <div class="bg-blue-50 p-4 rounded-md border border-blue-100 mb-2">
                <div class="flex items-center mb-2">
                  <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 text-blue-500 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z" />
                  </svg>
                  <%= form.label :date, "Date", class: "block text-sm font-medium text-blue-700" %>
                </div>
                <%= form.date_field :date, id: "task_timetracking_date", class: "form-input w-full rounded-md border-blue-200 focus:border-blue-500 focus:ring focus:ring-blue-200 focus:ring-opacity-50", data: { "calendar-timetracking-target": "dateField" } %>
              </div>
              
              <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div>
                  <div class="flex items-center mb-1">
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 text-gray-500 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z" />
                    </svg>
                    <%= form.label :start, "Start Time", class: "block text-sm font-medium text-gray-700" %>
                  </div>
                  <%= form.time_field :start, id: "task_timetracking_start", class: "form-input w-full rounded-md border-gray-300 focus:border-blue-500 focus:ring focus:ring-blue-200 focus:ring-opacity-50", value: Time.new(2000, 1, 1, 9, 0).strftime("%H:%M"), data: { action: "change->time-entry-form#updateDuration input->time-entry-form#updateDuration" } %>
                </div>
                
                <div>
                  <div class="flex items-center mb-1">
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 text-gray-500 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z" />
                    </svg>
                    <%= form.label :end, "End Time", class: "block text-sm font-medium text-gray-700" %>
                  </div>
                  <%= form.time_field :end, id: "task_timetracking_end", class: "form-input w-full rounded-md border-gray-300 focus:border-blue-500 focus:ring focus:ring-blue-200 focus:ring-opacity-50", value: Time.new(2000, 1, 1, 17, 0).strftime("%H:%M"), data: { action: "change->time-entry-form#updateDuration input->time-entry-form#updateDuration" } %>
                </div>
              </div>
      
              <div class="bg-gray-50 p-4 rounded-md border border-gray-200">
                <div class="flex items-center mb-1">
                  <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 text-gray-600 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z" />
                  </svg>
                  <%= form.label :duration_in_hours, "Duration (hours)", class: "block text-sm font-medium text-gray-700" %>
                </div>
                <div class="flex items-center">
                  <%= form.number_field :duration_in_hours, id: "task_timetracking_duration_in_hours", class: "form-input w-full rounded-md border-gray-300 focus:border-blue-500 focus:ring focus:ring-blue-200 focus:ring-opacity-50", step: 0.25, min: 0.25, value: 8.0, data: { action: "input->time-entry-form#updateTimes change->time-entry-form#updateTimes" } %>
                  <span class="ml-2 text-sm font-medium text-gray-600">hours</span>
                </div>
                <p class="text-sm text-gray-500 mt-2 flex items-start">
                  <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 text-blue-500 mr-1 flex-shrink-0 mt-0.5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
                  </svg>
                  <span>Duration will calculate automatically from start/end times, or you can enter it directly</span>
                </p>
              </div>
      
              <div id="form-errors" class="text-red-500 bg-red-50 p-3 rounded-md border border-red-200 hidden"></div>
            </div>

            <div class="flex justify-end mt-4">
              <button type="button" class="btn btn-secondary mr-2 flex items-center" data-action="click->calendar-timetracking#hideModal">
                <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
                </svg>
                Cancel
              </button>
              <%= form.submit "Save Time Entry", class: "btn btn-primary flex items-center", data: { disable_with: '<svg class="animate-spin -ml-1 mr-2 h-4 w-4 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24"><circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle><path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path></svg> Saving...' } do %>
                <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7" />
                </svg>
                Save Time Entry
              <% end %>
            </div>
          <% end %>
        </div>
      </div>
    </div>
  </div>

  <!-- Bulk Edit Modal -->
  <div class="modal" id="bulkEditModal" tabindex="-1" aria-labelledby="bulkEditModalLabel" aria-hidden="true" data-calendar-timetracking-target="bulkEditModal" style="z-index: 1060;" data-turbo="false">
    <div class="modal-dialog">
      <div class="modal-content">
        <div class="modal-header bg-gradient-to-r from-blue-50 to-indigo-50">
          <h5 class="modal-title text-blue-800 font-bold flex items-center" id="bulkEditModalLabel">
            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2 text-blue-600" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 11H5m14 0a2 2 0 012 2v6a2 2 0 01-2 2H5a2 2 0 01-2-2v-6a2 2 0 012-2m14 0V9a2 2 0 00-2-2M5 11V9a2 2 0 012-2m0 0V5a2 2 0 012-2h6a2 2 0 012 2v2M7 7h10" />
            </svg>
            Bulk Edit Time Entries
          </h5>
          <button type="button" class="text-gray-400 hover:text-gray-600 transition-colors focus:outline-none" aria-label="Close" onclick="document.getElementById('bulkEditModal').style.display = 'none';">
            <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
            </svg>
          </button>
        </div>
        <div class="modal-body">
          <div class="bg-blue-50 p-3 rounded-md border border-blue-100 mb-5">
            <div class="flex items-start">
              <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 text-blue-500 mr-2 mt-0.5 flex-shrink-0" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
              </svg>
              <p class="text-sm text-blue-800">Shift+click on calendar days to select multiple days, then use the options below to apply time entries to all selected days at once.</p>
            </div>
          </div>
          
          <div class="mb-5 bg-white p-4 rounded-md border border-gray-200 shadow-sm">
            <h6 class="text-sm font-semibold text-gray-700 mb-3 flex items-center">
              <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-1.5 text-gray-500" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 7h.01M7 3h5c.512 0 1.024.195 1.414.586l7 7a2 2 0 010 2.828l-7 7a2 2 0 01-2.828 0l-7-7A1.994 1.994 0 013 12V7a4 4 0 014-4z" />
              </svg>
              Day Type
            </h6>
            <div class="grid grid-cols-3 gap-2">
              <button type="button" class="btn btn-sm btn-success flex-1 flex items-center justify-center" onclick="bulkEditHandlers.applyWorkDay()">
                <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 13.255A23.931 23.931 0 0112 15c-3.183 0-6.22-.62-9-1.745M16 6V4a2 2 0 00-2-2h-4a2 2 0 00-2 2v2m4 6h.01M5 20h14a2 2 0 002-2V8a2 2 0 00-2-2H5a2 2 0 00-2 2v10a2 2 0 002 2z" />
                </svg>
                Work Day
              </button>
              <button type="button" class="btn btn-sm btn-primary flex-1 flex items-center justify-center" onclick="bulkEditHandlers.applyVacationDay()">
                <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3.055 11H5a2 2 0 012 2v1a2 2 0 002 2 2 2 0 012 2v2.945M8 3.935V5.5A2.5 2.5 0 0010.5 8h.5a2 2 0 012 2 2 2 0 104 0 2 2 0 012-2h1.064M15 20.488V18a2 2 0 012-2h3.064M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
                </svg>
                Vacation Day
              </button>
              <button type="button" class="btn btn-sm btn-danger flex-1 flex items-center justify-center" onclick="bulkEditHandlers.applySickDay()">
                <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
                </svg>
                Sick Day
              </button>
            </div>
          </div>
          
          <div class="mb-5 bg-white p-4 rounded-md border border-gray-200 shadow-sm">
            <h6 class="text-sm font-semibold text-gray-700 mb-3 flex items-center">
              <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-1.5 text-gray-500" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z" />
              </svg>
              Hours
            </h6>
            <div class="grid grid-cols-3 gap-2">
              <button type="button" class="btn btn-sm bg-gradient-to-r from-blue-500 to-blue-600 text-white hover:from-blue-600 hover:to-blue-700 flex items-center justify-center" onclick="bulkEditHandlers.applyStandardHours(8)" data-hours="8">
                <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z" />
                </svg>
                8 hours
              </button>
              <button type="button" class="btn btn-sm bg-gradient-to-r from-blue-400 to-blue-500 text-white hover:from-blue-500 hover:to-blue-600 flex items-center justify-center" onclick="bulkEditHandlers.applyStandardHours(4)" data-hours="4">
                <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z" />
                </svg>
                4 hours
              </button>
              <button type="button" class="btn btn-sm bg-gray-200 text-gray-700 hover:bg-gray-300 flex items-center justify-center" onclick="bulkEditHandlers.clearHours()">
                <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
                </svg>
                Clear
              </button>
            </div>
          </div>
          
          <div class="bg-gray-50 p-4 rounded-md border border-gray-200">
            <h6 class="text-sm font-semibold text-gray-700 mb-2 flex items-center">
              <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-1.5 text-gray-500" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z" />
              </svg>
              Selected Days
            </h6>
            <p class="text-xs text-gray-500 mb-2">Hold Shift key and click on calendar days to select them</p>
            <div id="selected-days-container" data-calendar-timetracking-target="selectedDays" class="mt-2 p-3 border rounded-md bg-white max-h-40 overflow-y-auto">
              <p class="text-gray-500 text-sm italic">No days selected. Hold Shift key and click on calendar days to select them.</p>
            </div>
          </div>
        </div>
        <div class="modal-footer bg-gray-50">
          <button type="button" class="btn btn-secondary flex items-center" onclick="document.getElementById('bulkEditModal').style.display = 'none';">
            <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
            </svg>
            Cancel
          </button>
          <button type="button" class="btn btn-primary flex items-center" onclick="bulkEditHandlers.submitBulkEdit(<%= @organization.id %>, <%= @task.id %>)">
            <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7" />
            </svg>
            Apply Changes
          </button>
        </div>
      </div>
    </div>
  </div>
<% end %>